// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: gostify.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GostifyClient is the client API for Gostify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GostifyClient interface {
	GetUsers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Users, error)
	GetPlaylists(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Playlists, error)
	GetSongs(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Users, error)
}

type gostifyClient struct {
	cc grpc.ClientConnInterface
}

func NewGostifyClient(cc grpc.ClientConnInterface) GostifyClient {
	return &gostifyClient{cc}
}

func (c *gostifyClient) GetUsers(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/Gostify/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gostifyClient) GetPlaylists(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Playlists, error) {
	out := new(Playlists)
	err := c.cc.Invoke(ctx, "/Gostify/GetPlaylists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gostifyClient) GetSongs(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/Gostify/GetSongs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GostifyServer is the server API for Gostify service.
// All implementations must embed UnimplementedGostifyServer
// for forward compatibility
type GostifyServer interface {
	GetUsers(context.Context, *UserRequest) (*Users, error)
	GetPlaylists(context.Context, *UserRequest) (*Playlists, error)
	GetSongs(context.Context, *UserRequest) (*Users, error)
	mustEmbedUnimplementedGostifyServer()
}

// UnimplementedGostifyServer must be embedded to have forward compatible implementations.
type UnimplementedGostifyServer struct {
}

func (UnimplementedGostifyServer) GetUsers(context.Context, *UserRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedGostifyServer) GetPlaylists(context.Context, *UserRequest) (*Playlists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylists not implemented")
}
func (UnimplementedGostifyServer) GetSongs(context.Context, *UserRequest) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSongs not implemented")
}
func (UnimplementedGostifyServer) mustEmbedUnimplementedGostifyServer() {}

// UnsafeGostifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GostifyServer will
// result in compilation errors.
type UnsafeGostifyServer interface {
	mustEmbedUnimplementedGostifyServer()
}

func RegisterGostifyServer(s grpc.ServiceRegistrar, srv GostifyServer) {
	s.RegisterService(&Gostify_ServiceDesc, srv)
}

func _Gostify_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GostifyServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gostify/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GostifyServer).GetUsers(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gostify_GetPlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GostifyServer).GetPlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gostify/GetPlaylists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GostifyServer).GetPlaylists(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gostify_GetSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GostifyServer).GetSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gostify/GetSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GostifyServer).GetSongs(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gostify_ServiceDesc is the grpc.ServiceDesc for Gostify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gostify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Gostify",
	HandlerType: (*GostifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _Gostify_GetUsers_Handler,
		},
		{
			MethodName: "GetPlaylists",
			Handler:    _Gostify_GetPlaylists_Handler,
		},
		{
			MethodName: "GetSongs",
			Handler:    _Gostify_GetSongs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gostify.proto",
}
